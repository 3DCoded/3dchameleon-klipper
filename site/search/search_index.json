{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>3dchameleon-klipper is a highly configuration klipper plugin for the 3DChameleon</p>"},{"location":"#quick-start","title":"\"Quick\"-start","text":""},{"location":"#wiring","title":"Wiring","text":"<p>To begin setting up 3dchameleon-klipper, see Wiring to connect your 3DChameleon to your Raspberry Pi.</p>"},{"location":"#install","title":"Install","text":"<p>Install 3dchameleon-klipper. Run the following on your Raspberry Pi:</p> <pre><code>`cd ~ &amp;&amp; git clone https://github.com/3DCoded/3dchameleon-klipper &amp;&amp; cd 3dchameleon-klipper &amp;&amp; ./install.sh`\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Follow Configuration to configure your 3DChameleon to your specific setup.</p>"},{"location":"#slicer-setup","title":"Slicer Setup","text":"<p>Follow Slicer Setup to setup PrusaSlier for this plugin and your 3DChameleon. OrcaSlicer support is coming soon.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Pin Configuration: If you didn't use a relay to connect your 3DChameleon to your Raspberry Pi, make sure there's a <code>!</code> in front of the <code>host: gpioXX</code> in your <code>[output_pin]</code> configuration (<code>3dchameleon.cfg</code>) </p> <p>Filament Sensor Configuration: This plugin relies on temporarily disabling the filament sensor behavior. Follow these steps to setup your filaments sensor with this plugin. 1. Set <code>pause_on_runout: False</code> 2. Change your <code>runout_gcode</code> and <code>insert_gcode</code> as follows. Example:</p> <pre><code>runout_gcode:\n    M117 Filament Runout Detected!\n    PAUSE\n</code></pre> <p>Turns into:</p> <pre><code>runout_gcode:\n    {% set saved = printer.save_variables.variables %}\n    {% if saved.efsensor %}\n    M117 Filament Runout Detected!\n    PAUSE\n    {% endif %}\n</code></pre> <p>Example:</p> <pre><code>[output_pin 3dchameleon]\npin: host: gpio18\n</code></pre> <p>turns into </p> <pre><code>[output_pin 3dchameleon]\npin: !host: gpio18 # &lt;-- Notice the ! in front of host\n</code></pre> <p>Configuration Options:</p> <p>STABLE (in main branch):</p> <ul> <li><code>filament_sensor_name</code>: The name of the primary filament sensor in your printer. It should be located between the chameleon's splitter and your printer's extruder.</li> <li><code>filament_sensor_type</code>: The type of filament sensor used. Usually a <code>filament_switch_sensor</code></li> <li><code>pin</code>: The name of the <code>output_pin</code> the relay is connected to. See wiring</li> <li><code>unload_time</code>: The time it takes for the Chameleon to unload the filament from the filament sensor to the tubes going into the splitter. This should be just long enough to get the filament out of the way for the next filament, with ~0.5s extra as buffer.</li> <li><code>max_unload_time</code>: The maximum amount of time the Chameleon is allowed to try to unload the filament before the filament sensor triggers. Example: <code>max_unload_time: 5</code> If the Chameleon unloads for more than 5 seconds, and the filament sensor still reads filament present, the print is paused.</li> <li><code>load_time</code>: The time it takes for the Chameleon to load the filament from the filament sensor to the extruder, plus ~1s extra to make sure it is engaged with the extruder gears.</li> <li><code>max_load_time</code>: The maximum time the Chameleon is allowed to try to load the filament before the filament sensor triggers. Example: <code>max_load_time: 5</code> If the Chameleon loads for more than 5 seconds, and the filament sensor doesn't read any filament present, the print is paused.</li> <li><code>pulse_time</code>: The time it takes to pulse the Chameleon (usually 0.5)</li> </ul> <p>EXPERIMENTAL (in dev branch):</p> <ul> <li><code>clippy</code>: Whether or not an Auto3DClippy is used. This will impact unloading behavior as described in Utility G-Codes. This can be set to <code>true</code> or <code>false</code></li> <li><code>clippy_distance</code>: The distance filament should be loaded after running the Auto3DClippy to pull it in enough so that the filament sensor no longer detects filament.</li> </ul> <p>Default Configuration:</p> <pre><code>[3dchameleon]\nclippy: false\nclippy_distance: 40\nfilament_sensor_name: fsensor\nfilament_sensor_type: filament_switch_sensor\npin: 3dchameleon\nunload_time: 7.5\nmax_unload_time: 10\nload_time: 0.5\nmax_load_time: 10.5\npulse_time: 0.5\n</code></pre>"},{"location":"slicersetup/","title":"Slicer Setup","text":"<p>This guide will explain how to setup PrusaSlicer (OrcaSlicer coming soon) with this plugin, optomizing some settings for this plugin.</p>"},{"location":"slicersetup/#prusaslicer","title":"PrusaSlicer","text":"<ol> <li>In PrusaSlicer, go to <code>Printer Settings</code> -&gt; <code>General</code> -&gt; <code>Capabilities</code> -&gt; <code>Extruders</code>, and set it to 4</li> <li> <p>Enable the <code>Single Extruder Multi Material</code> checkbox </p> </li> <li> <p>In your Klipper <code>PRINT_START</code> macro, add the following BEFORE your purge line:</p> </li> </ol> <pre><code>RESET_CHAMELEON\nG4 P1000\nPULSE_CHAMELEON PULSES=7\nG4 P1000\nPULSE_CHAMELEON PULSES={params.INITIAL_EXTRUDER+1}\nLOAD_CHAMELEON\nSET_CHAMELEON_STATE P={params.INITIAL_EXTRUDER} L=-1\nG1 E65 F1000; Change this to your extruder to hotend distance\n</code></pre> <ol> <li>Back in PrusaSlicer, in <code>Custom G-Code</code> -&gt; <code>Start G-Code</code>, pass the parameter <code>INITIAL_EXTRUDER</code> to your <code>PRINT_START</code> macro:</li> </ol> <pre><code>PRINT_START other_parameters... INITIAL_EXTRUDER=[initial_extruder]\n</code></pre> <ol> <li>In your Klipper <code>PRINT_END</code> macro, add the following BEFORE your printer cools down:</li> </ol> <pre><code>{% set saved = printer.save_variables.variables %}\n{% set p = saved.prev_ext %}\nQUICK_TIP_SHAPING MOVES=3; change this to however any moves works for your filaments\nPULSE_CHAMELEON PULSES=6\nUNLOAD_CHAMELEON TOOL={p}\n</code></pre> <ol> <li>Back in PrusaSlicer, in your <code>Tool Change G-Code</code> section, put the following:</li> </ol> <pre><code>SET_CHAMELEON_STATE L={layer_num}\n{if previous_extruder &gt; -1}\nQUICK_TIP_SHAPING MOVES=[filament_loading_speed_start[previous_extruder]]\n{endif}\nT{next_extruder}\nSET_CHAMELEON_STATE P={next_extruder}\n</code></pre> <ol> <li>In <code>Single Extruder MM Setup</code>, set all the fields EXCEPT <code>Purging Volume</code> to 0</li> <li> <p>Optionally, enable <code>High extruder current on filament swap</code> </p> </li> <li> <p>In <code>Filament Settings</code> -&gt; <code>Advanced</code> -&gt; <code>Toolchange Parameters with single extruder MM printers</code>, set all the values to 0 EXCEPT <code>Purge Volume Multiplier</code></p> </li> <li>Open <code>Ramming settings...</code> and set <code>Total ramming time (s)</code> to 0, then hit <code>OK</code></li> <li>For each of your filament presets, set your <code>Loading speed at the start</code> to however many <code>MOVES</code> works for your filament with <code>QUICK_TIP_SHAPING</code></li> </ol> <p> </p>"},{"location":"updating/","title":"Updating","text":""},{"location":"updating/#how-to-update","title":"How to update","text":"<p>Updating 3dchameleon-klipper can be done with a few simple commands:</p> <pre><code>cd ~/3dchameleon-klipper\n./update.sh\n</code></pre>"},{"location":"utilitygcodes/","title":"Utility G-Codes","text":"<p>3dchameleon-klipper provides several utility G-Codes to assist in controlling your Chameleon.</p>"},{"location":"utilitygcodes/#utility-g-codes_1","title":"Utility G-Codes","text":"<ul> <li><code>SET_CHAMELEON VALUE=</code> Sets the relay pin to <code>VALUE</code>, where <code>1</code> is on, and <code>0</code> is off</li> <li><code>UNLOAD_CHAMELEON TOOL=</code> Unloads the Chameleon at the provided <code>TOOL</code>, described more below, This is usually only used in the <code>TOOLCHANGE</code> macro</li> <li><code>LOAD_CHAMELEON</code> Loads the Chameleon, described more below</li> <li><code>PRESS_CHAMELEON DURATION=</code> Presses the chameleon pin for the provided <code>DURATION</code></li> <li><code>PULSE_CHAMELEON PULSES=</code> Pulses the chameleon pin for the duration <code>PULSES * pulse_time</code> (<code>pulse_time</code> was set in Configuration)</li> <li><code>RESET_CHAMELEON</code> Rapidly pulses the chameleon pin twice to reset the state to be ready for a toolchange (exits the load/unload filament stage of the Chameleon)</li> <li><code>TIP_SHAPING TEMP= STAGES=</code> Runs tip shaping using the default 3DChameleon method, then heats to <code>TEMP</code>. See below for information on <code>STAGES</code></li> </ul>"},{"location":"utilitygcodes/#debugginginternal-use-g-codes","title":"Debugging/Internal Use G-Codes","text":"<ul> <li><code>UPDATE_CHAMELEON_SENSOR</code> Updates the Chameleon's filament sensors and saves the value internally</li> <li><code>QUERY_CHAMELEON_SENSOR</code> Queries the Chameleon's filament sensors, output in the form of <code>[x,x,x,x,x]</code>, where <code>x=1</code> means filament present, and <code>x=0</code> means filament not present. This returns a list in preparation for multiple filament sensor support.</li> </ul>"},{"location":"utilitygcodes/#tip_shaping-stages","title":"TIP_SHAPING STAGES=","text":"<ul> <li><code>STAGES=1</code> Cool to 180, do full tip shaping, then heat to <code>TEMP</code></li> <li><code>STAGES=2</code> Cool to 180, then 165, do tip shaping, then heat to <code>TEMP</code></li> <li><code>STAGES=3</code> Cool to 180, then 165, then 155, do tip shaping, then heat to <code>TEMP</code></li> <li><code>STAGES=4</code> Default behavior. Cool to 180, then 165, then 155, then 150, do tip shaping, then heat to <code>TEMP</code></li> </ul> <p>NOTE that smaller tip shaping moves may be executed between temperature increments.</p>"},{"location":"utilitygcodes/#how-unload_chameleon-works","title":"How UNLOAD_CHAMELEON works","text":""},{"location":"utilitygcodes/#without-auto3dclippy","title":"WITHOUT Auto3DClippy","text":"<ol> <li>\"Press\" the Chameleon pin</li> <li>Check if filament detected for <code>TOOL</code></li> <li>Run <code>UPDATE_CHAMELEON_SENSOR</code></li> <li>Check if more than <code>max_unload_time</code> has elapsed. If so, skip remaining steps and unload failed</li> <li>Wait 0.25s with <code>G4 P250</code></li> </ol> <p>EXPERIMENTAL: Step 5 will use <code>G1 E-10 F2400</code> instead of <code>G4 P250</code> to wait 0.25s</p> <ol> <li>Repeat steps 2-5 until filament is not detected for <code>TOOL</code></li> <li>Wait another <code>unload_time</code> with <code>G4 P</code> with <code>unload_time * 1000</code></li> <li>\"Release\" the Chameleon pin</li> </ol>"},{"location":"utilitygcodes/#with-auto3dclippy-experimental-in-dev-branch","title":"WITH Auto3DClippy (Experimental in dev branch)","text":"<ol> <li>\"Press\" the Chameleon pin</li> <li>Load filament <code>clippy_distance</code> at 40mm/s</li> <li>Wait <code>unload_time</code> with <code>G4 P</code> with <code>unload_time * 1000</code></li> <li>\"Release\" the Chameleon pin</li> </ol>"},{"location":"utilitygcodes/#how-load_chameleon-works","title":"How LOAD_CHAMELEON works","text":"<ol> <li>\"Press\" the Chameleon pin</li> <li>Check if filament detected for <code>TOOL</code></li> <li>Run <code>UPDATE_CHAMELEON_SENSOR</code></li> <li>Check if more than <code>max_load_time</code> has elapsed. If so, skip remaining steps and load failed</li> <li>Wait 0.25s with <code>G4 P250</code></li> <li>Repeat steps 2-5 until filament is detected</li> <li>Wait another <code>load_time</code> with <code>G4 P</code> with <code>load_time * 1000</code></li> <li>\"Release\" the Chameleon pin</li> </ol>"},{"location":"utilitygcodes/#on-unloadload-failed","title":"On Unload/Load Failed","text":"<ol> <li>\"Release\" the Chameleon relay pin</li> <li>Display Unload/Load Failed with <code>M117</code></li> <li>Pause with <code>PAUSE</code></li> </ol>"},{"location":"wiring/","title":"Wiring","text":"<p>There are two main methods of connecting your 3DChameleon to your Raspberry pi. The 2-wire method is the recommended method, while the relay method allows for easier debugging with the limit switch. </p> <p>NOTE that there is a different pin configuration required for each method. See below for details. </p>"},{"location":"wiring/#2-wire-method","title":"2-wire method","text":"<p>This is the simplest method of wiring your 3DChameleon to your Raspberry Pi.</p> <p>Steps:</p> <ol> <li>Unplug the limit switch from the 3DChameleon, taking note of which color wire was plugged into where.</li> <li>Plug one dupont into the 3DChameleon, where the black wire of the limit switch used to be. To avoid confusion, use a black dupont here if possible.</li> <li>Plug another dupont into the 3DChameleon, where the green wire of the limit switch used to be.</li> <li>Connect the black dupont to a GND pin of your Raspberry Pi; see pinout.xyz for where this pin is.</li> <li>Connect the other dupont to a GPIO pin of your Raspberry Pi. The default config uses GPIO18, but you can use any other pin as long as it starts with \"GPIO\".</li> </ol>"},{"location":"wiring/#relay-shield-method","title":"Relay (shield) method","text":"<p>This method is more complex, and adds a clicking noise every time your Chameleon is triggered, but is helpful for debugging. Before wiring according to the tables below, use a zip tie to keep the limit switch pressed.</p> <p>Limit Switch to 3DChameleon</p> Limit Switch 3DChameleon + (Red) Same (via Dupont) - (Black) Same (via Dupont) <p>Misc Wiring</p> Source Destination Limit Switch Data (Green) Dupont (leave other end loose for now) 3DChameleon Data (Last remaining limit switch pin on 3DChameleon board) Another dupont (leave other end loose for now) <p>Limit Switch to Relay</p> Limit Switch Relay Loose Data Dupont COM (screw terminal) <p>3DChameleon to Relay</p> 3DChameleon Relay Loose Data Dupont NO (screw terminal, Normally Open) <p>Raspberry Pi to Relay</p> Raspberry Pi Relay 5V VCC GND GND GPIOxx SIG (last remaining relay pin)"},{"location":"wiring/#debugging-with-relay-method","title":"Debugging with relay method","text":"<p>If you used the relay method, you can bypass the Raspberry Pi to control the Chameleon. </p> <p>Steps:</p> <ol> <li>Run: <code>SET_CHAMELEON VALUE=1</code></li> <li>You can now press the limit switch to control your Chameleon directly</li> <li>After debugging, run: <code>SET_CHAMELEON VALUE=0</code></li> </ol>"},{"location":"wiring/#configuration","title":"Configuration","text":"<p>If you use the 2-wire method, your <code>[output_pin 3dchameleon]</code> section should look like:</p> <pre><code>[output_pin 3dchameleon]\npin: !host: gpio20 # Note the !\n</code></pre> <p>If you use the relay method, your <code>[output_pin 3dchameleon]</code> section should look like:</p> <pre><code>[output_pin 3dchameleon]\npin: host: gpio20 # Note that there is no !\n</code></pre>"}]}
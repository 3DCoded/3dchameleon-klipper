{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about","title":"About","text":"<p>3dchameleon-klipper is a highly configuration klipper plugin for the 3DChameleon</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Many configuration options</li> <li>Using the filament sensor to allow for more reliable loads and unloads</li> <li>Many helpful macros and G-Code commands</li> <li>Saving the state of the 3DChameleon to reduce the guesswork</li> <li>Helping in tip shaping with a flexible macro</li> <li>Assigning different tip shaping parameters for each filament</li> <li>Detailed documentation to diagnose common issues</li> </ul>"},{"location":"#planned-features","title":"Planned Features","text":"<ul> <li>Support for multiple filament sensors to reduce failed unloads (See #4)</li> <li>Support for \"telling\" the Chameleon what tool is loaded based on the filament sensors</li> <li>Ability to assist with initially loading the Chameleon (see #5)</li> <li>KlipperScreen and/or LCD control panel for the Chameleon (see #9)</li> <li>Support for Klipperized Auto3DClippy (in early development) (see #8)</li> <li>Support for normal Auto3DClippy (experimental in dev branch) (see #7)</li> </ul>"},{"location":"#quick-start","title":"\"Quick\"-start","text":""},{"location":"#wiring","title":"Wiring","text":"<p>To begin setting up 3dchameleon-klipper, see Wiring to connect your 3DChameleon to your Raspberry Pi.</p>"},{"location":"#install","title":"Install","text":"<p>Install 3dchameleon-klipper. Run the following on your Raspberry Pi:</p> <pre><code>`cd ~ &amp;&amp; git clone https://github.com/3DCoded/3dchameleon-klipper &amp;&amp; cd 3dchameleon-klipper &amp;&amp; ./install.sh`\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Follow Configuration to configure your 3DChameleon to your specific setup.</p>"},{"location":"#slicer-setup","title":"Slicer Setup","text":"<p>Follow Slicer Setup to setup PrusaSlier for this plugin and your 3DChameleon. OrcaSlicer support is coming soon.</p>"},{"location":"contributing/branches/","title":"Branches","text":"<p>There are multiple branches on the 3dchameleon-klipper Github repository. Here is a simple explanation of each.</p>"},{"location":"contributing/branches/#main","title":"main","text":"<p>This branch holds the latest stable code for 3dchameleon-klipper. Pull requests may only be approved to this branch if the following conditions are met:</p> <ul> <li>The code is stable</li> <li>The code only affects the areas that are stated in the pull request description</li> </ul>"},{"location":"contributing/branches/#dev","title":"dev","text":"<p>This branch holds the latest experimental code for 3dchameleon-klipper. Use this if you want to use a feature labeled <code>EXPERIMENTAL</code>. Pull requests may be approved to this branch is the following condition is met:</p> <ul> <li>The code only affects the areas that are stated in the pull request description</li> </ul>"},{"location":"contributing/branches/#docs","title":"docs","text":"<p>This branch holds the Markdown, YAML, and image source for this documentation. Pull requests may only be accepted to this branch if the following condition is met:</p> <ul> <li>The code only affects the areas that are stated in the pull request description</li> </ul>"},{"location":"contributing/branches/#gh-pages","title":"gh-pages","text":"<p>This branch holds the compiled HTML, CSS, JavaScript, and images of the <code>docs</code> branch. This is the branch hosting this documentation. Pull requests are not accepted to this branch.</p>"},{"location":"contributing/bugs/","title":"Bug Report","text":"<p>If you find a bug with this plugin, please submit as an issue here</p>"},{"location":"contributing/features/","title":"Feature Request","text":"<p>If you would like a feature to be implemented, please submit your request here</p>"},{"location":"initialsetup/configuration/","title":"Configuration","text":"<p>Pin Configuration: If you didn't use a relay to connect your 3DChameleon to your Raspberry Pi, make sure there's a <code>!</code> in front of the <code>host: gpioXX</code> in your <code>[output_pin]</code> configuration (<code>3dchameleon.cfg</code>) </p> <p>Filament Sensor Configuration: This plugin relies on temporarily disabling the filament sensor behavior. Follow these steps to setup your filaments sensor with this plugin. 1. Set <code>pause_on_runout: False</code> 2. Change your <code>runout_gcode</code> and <code>insert_gcode</code> as follows. Example:</p> <pre><code>runout_gcode:\n    M117 Filament Runout Detected!\n    PAUSE\n</code></pre> <p>Turns into:</p> <pre><code>runout_gcode:\n    {% set saved = printer.save_variables.variables %}\n    {% if saved.efsensor %}\n    M117 Filament Runout Detected!\n    PAUSE\n    {% endif %}\n</code></pre> <p>Example:</p> <pre><code>[output_pin 3dchameleon]\npin: host: gpio18\n</code></pre> <p>turns into </p> <pre><code>[output_pin 3dchameleon]\npin: !host: gpio18 # &lt;-- Notice the ! in front of host\n</code></pre> <p>Configuration Options:</p> <p>STABLE (in main branch):</p> <ul> <li><code>filament_sensor_name</code>: The name of the primary filament sensor in your printer. It should be located between the chameleon's splitter and your printer's extruder.</li> <li><code>filament_sensor_type</code>: The type of filament sensor used. Usually a <code>filament_switch_sensor</code></li> <li><code>pin</code>: The name of the <code>output_pin</code> the relay is connected to. See wiring</li> <li><code>unload_time</code>: The time it takes for the Chameleon to unload the filament from the filament sensor to the tubes going into the splitter. This should be just long enough to get the filament out of the way for the next filament, with ~0.5s extra as buffer.</li> <li><code>max_unload_time</code>: The maximum amount of time the Chameleon is allowed to try to unload the filament before the filament sensor triggers. Example: <code>max_unload_time: 5</code> If the Chameleon unloads for more than 5 seconds, and the filament sensor still reads filament present, the print is paused.</li> <li><code>load_time</code>: The time it takes for the Chameleon to load the filament from the filament sensor to the extruder, plus ~1s extra to make sure it is engaged with the extruder gears.</li> <li><code>max_load_time</code>: The maximum time the Chameleon is allowed to try to load the filament before the filament sensor triggers. Example: <code>max_load_time: 5</code> If the Chameleon loads for more than 5 seconds, and the filament sensor doesn't read any filament present, the print is paused.</li> <li><code>pulse_time</code>: The time it takes to pulse the Chameleon (usually 0.5)</li> </ul> <p>EXPERIMENTAL (in dev branch):</p> <ul> <li><code>clippy</code>: Whether or not an Auto3DClippy is used. This will impact unloading behavior as described in Utility G-Codes. This can be set to <code>true</code> or <code>false</code></li> <li><code>clippy_distance</code>: The distance filament should be loaded after running the Auto3DClippy to pull it in enough so that the filament sensor no longer detects filament.</li> </ul> <p>Default Configuration:</p> <pre><code>[3dchameleon]\nclippy: false\nclippy_distance: 40\nfilament_sensor_name: fsensor\nfilament_sensor_type: filament_switch_sensor\npin: 3dchameleon\nunload_time: 7.5\nmax_unload_time: 10\nload_time: 0.5\nmax_load_time: 10.5\npulse_time: 0.5\n</code></pre>"},{"location":"initialsetup/slicersetup/","title":"Slicer Setup","text":"<p>This guide will explain how to setup PrusaSlicer and OrcaSlicer with this plugin, optomizing some settings for this plugin.</p>"},{"location":"initialsetup/slicersetup/#klipper-macros","title":"Klipper macros","text":"<p>Before the full slicer setup begins, the following changes need to be made to your <code>PRINT_START</code> and <code>PRINT_END</code> Klipper macros.</p> <p>In your <code>PRINT_START</code> macro, add the following BEFORE your purge line:</p> <pre><code>RESET_CHAMELEON\nG4 P1000\nPULSE_CHAMELEON PULSES=7\nG4 P1000\nPULSE_CHAMELEON PULSES={params.INITIAL_EXTRUDER+1}\nLOAD_CHAMELEON\nSET_CHAMELEON_STATE P={params.INITIAL_EXTRUDER} L=-1\nG1 E65 F1000; Change this to your extruder to hotend distance\n</code></pre> <p>In your <code>PRINT_END</code> macro, add the following BEFORE your printer cools down:</p> <pre><code>{% set saved = printer.save_variables.variables %}\n{% set p = saved.prev_ext %}\nQUICK_TIP_SHAPING MOVES=3; change this to however any moves works for your filaments\nPULSE_CHAMELEON PULSES=6\nUNLOAD_CHAMELEON TOOL={p}\n</code></pre>"},{"location":"initialsetup/slicersetup/#prusaslicer-and-orcaslicer","title":"PrusaSlicer and OrcaSlicer","text":"<p>The same settings shown here MAY work with SuperSlicer, BambuStudio, and other PrusaSlicer forks.</p>"},{"location":"initialsetup/slicersetup/#set-number-of-extruders","title":"Set number of extruders","text":"<p>To begin slicer setup, we need to configure the slicer so that it can use four extruders. </p> <p>For PrusaSlicer, go to <code>Printer Settings</code> -&gt; <code>General</code> -&gt; <code>Capabilities</code> -&gt; <code>Extruders</code>, and set it to 4 2. Enable the <code>Single Extruder Multi Material</code> checkbox  NOTE that while this screenshot shows the <code>Single Extruer Multi Material</code> checkbox UNCHECKED, it should be CHECKED.</p> <p>For OrcaSlicer, on the left panel, in the filament section, click the <code>+</code> button until four filaments are shown </p>"},{"location":"initialsetup/slicersetup/#pass-parameters-to-print_start","title":"Pass parameters to <code>PRINT_START</code>","text":"<p>To use the modified <code>PRINT_START</code> macro from before, we need to pass the <code>INITIAL_EXTRUDER</code> parameter to the macro. </p> <p>In PrusaSlicer, go to <code>Printer Settings</code> -&gt; <code>Custom G-Code</code> -&gt; <code>Start G-Code</code> </p> <p>In OrcaSlicer, go to <code>Printer Settings</code> -&gt; <code>Machine G-Code</code> -&gt; <code>Machine start G-Code</code> </p> <p>Edit the contents of the start print GCode as follows:</p> <pre><code>PRINT_START other parameters... INITIAL_EXTRUDER=[initial_extruder]\n</code></pre>"},{"location":"initialsetup/slicersetup/#toolchange-gcode","title":"Toolchange GCode","text":"<p>To successfully run a toolchange, the slicer's toolchange GCode needs to be changed. In the same panel as in the previous step, navigate to the toolchange GCode.</p> <p>In PrusaSlicer, it is called <code>Tool Change G-Code</code></p> <p>In OrcaSlicer, it is called <code>Change filament G-Code</code></p> <p>Replace the existing contents (if there are any) with:</p> <pre><code>SET_CHAMELEON_STATE L={layer_num}\n{if previous_extruder &gt; -1}\nQUICK_TIP_SHAPING MOVES=[filament_loading_speed_start[previous_extruder]]\n{endif}\nT{next_extruder}\nSET_CHAMELEON_STATE P={next_extruder}\n</code></pre>"},{"location":"initialsetup/slicersetup/#printer-tip-shaping","title":"Printer Tip Shaping","text":"<p>This plugin (and the 3DChameleon) have their own custom tip shaping algorithms. To use them, the slicer's tip shaping must be disabled. </p> <p>In PrusaSlicer, navigate to <code>Printer Settings</code> -&gt; <code>Single Extruder MM Setup</code></p> <p></p> <p>In OrcaSlicer, navigate to <code>Printer Settings</code> -&gt; <code>Multimaterial</code> -&gt; <code>Single extruder multimaterial parameters</code></p> <p></p> <p>Set all the fields EXCEPT <code>Purging Volume</code> (PrusaSlicer only) to 0. Optionally, enable <code>High extruder current on filament swap</code></p>"},{"location":"initialsetup/slicersetup/#filament-tip-shaping","title":"Filament Tip Shaping","text":"<p>The final step of slicer setup is disabling the filament-specific tip shaping settings. </p> <p>These changes will need to be repeated for ALL your filament settings</p> <p>In PrusaSlicer, go to <code>Filament Settings</code> -&gt; <code>Advanced</code> -&gt; <code>Toolchange Parameters with single extruder MM printers</code>.</p> <p></p> <p>In OrcaSlicer, go to <code>Filament Settings</code> -&gt; <code>Multimaterial</code> -&gt; <code>Toolchange parameters with single parameter MM printers</code>.</p> <p></p> <p>Set all the values to 0 EXCEPT <code>Purge Volume Multiplier</code> (PrusaSlicer only).</p> <p>Click the <code>Ramming settings...</code> button, and set the <code>Total ramming time (s)</code> to 0, then hit <code>OK</code></p> <p></p>"},{"location":"initialsetup/wiring/","title":"Wiring","text":"<p>There are two main methods of connecting your 3DChameleon to your Raspberry pi. The 2-wire method is the recommended method, while the relay method allows for easier debugging with the limit switch. </p> <p>NOTE that there is a different pin configuration required for each method. See below for details. </p>"},{"location":"initialsetup/wiring/#2-wire-method","title":"2-wire method","text":"<p>This is the simplest method of wiring your 3DChameleon to your Raspberry Pi.</p> <p>Steps:</p> <ol> <li>Unplug the limit switch from the 3DChameleon, taking note of which color wire was plugged into where.</li> <li>Plug one dupont into the 3DChameleon, where the black wire of the limit switch used to be. To avoid confusion, use a black dupont here if possible.</li> <li>Plug another dupont into the 3DChameleon, where the green wire of the limit switch used to be.</li> <li>Connect the black dupont to a GND pin of your Raspberry Pi; see pinout.xyz for where this pin is.</li> <li>Connect the other dupont to a GPIO pin of your Raspberry Pi. The default config uses GPIO18, but you can use any other pin as long as it starts with \"GPIO\".</li> </ol>"},{"location":"initialsetup/wiring/#relay-shield-method","title":"Relay (shield) method","text":"<p>This method is more complex, and adds a clicking noise every time your Chameleon is triggered, but is helpful for debugging. Before wiring according to the tables below, use a zip tie to keep the limit switch pressed.</p> <p>Limit Switch to 3DChameleon</p> Limit Switch 3DChameleon + (Red) Same (via Dupont) - (Black) Same (via Dupont) <p>Misc Wiring</p> Source Destination Limit Switch Data (Green) Dupont (leave other end loose for now) 3DChameleon Data (Last remaining limit switch pin on 3DChameleon board) Another dupont (leave other end loose for now) <p>Limit Switch to Relay</p> Limit Switch Relay Loose Data Dupont COM (screw terminal) <p>3DChameleon to Relay</p> 3DChameleon Relay Loose Data Dupont NO (screw terminal, Normally Open) <p>Raspberry Pi to Relay</p> Raspberry Pi Relay 5V VCC GND GND GPIOxx SIG (last remaining relay pin)"},{"location":"initialsetup/wiring/#debugging-with-relay-method","title":"Debugging with relay method","text":"<p>If you used the relay method, you can bypass the Raspberry Pi to control the Chameleon. </p> <p>Steps:</p> <ol> <li>Run: <code>SET_CHAMELEON VALUE=1</code></li> <li>You can now press the limit switch to control your Chameleon directly</li> <li>After debugging, run: <code>SET_CHAMELEON VALUE=0</code></li> </ol>"},{"location":"initialsetup/wiring/#configuration","title":"Configuration","text":"<p>If you use the 2-wire method, your <code>[output_pin 3dchameleon]</code> section should look like:</p> <pre><code>[output_pin 3dchameleon]\npin: !host: gpio20 # Note the !\n</code></pre> <p>If you use the relay method, your <code>[output_pin 3dchameleon]</code> section should look like:</p> <pre><code>[output_pin 3dchameleon]\npin: host: gpio20 # Note that there is no !\n</code></pre>"},{"location":"other/auto3dclippy/","title":"Auto3DClippy","text":"<p>The Auto3DClippy is the 3DChameleon's filament cutter designed for the MK4 Pro. It works by having a servo attached to a knife blade, and by moving the servo, it can cut the filament cleanly. It is controlled with the 3DChameleon via three pins. </p>"},{"location":"other/auto3dclippy/#wiring","title":"Wiring","text":""},{"location":"other/auto3dclippy/#method-1","title":"Method 1","text":"<p>Use this method if you have a metal horn on your servo and/or want a cleaner wiring solution.</p> <p>See this post on the 3DChameleon forums.</p>"},{"location":"other/auto3dclippy/#method-2","title":"Method 2","text":"<p>Use this method if you're using an Auto3DKlippy, or if you already have the parts required for this method.</p> <p>Wiring guide is available here. The relevant 3DChameleon forum post is here.</p>"},{"location":"other/auto3dclippy/#recommendations","title":"Recommendations","text":"<ul> <li>Servo extension cable: Amazon</li> <li> <p>Metal servo horn: Amazon</p> <p>NOTE that the metal servo horn requires a different Auto3DClippy design. See this post for details.</p> </li> </ul>"},{"location":"other/auto3dclippy/#configuration","title":"Configuration","text":"<p>This feature is only available in the <code>dev</code> branch, as it is still experimental. To configure it, just add:</p> <pre><code>clippy: true\nclippy_distance: 40\n</code></pre> <p>to your <code>[3dchameleon]</code> section in your <code>3dchameleon.cfg</code>. <code>clippy_distance</code> is detailed in Configuration</p>"},{"location":"other/auto3dklippy/","title":"Auto3DKlippy","text":"<p>The Auto3DKlippy (with a K) is a Klipperized Auto3DClippy implementation. It uses the same cutter mechanism, but is controlled via an Arduino, instead of the 3DChameleon's electronics. It is still only lightly tested and only recommended for advanced users.</p>"},{"location":"other/auto3dklippy/#note","title":"Note","text":"<p>Many of the tips shared in Auto3DClippy can be applied to the Auto3DKlippy</p>"},{"location":"other/auto3dklippy/#wiring","title":"Wiring","text":"<p>See Auto3DClippy for wiring details.</p> <p>After that, a few changes need to be made. </p> <ol> <li>The Signal and GND wires need to be connected to an Arduino (In my case an Arduino Nano on a breadboard)</li> <li>Plug the Arduino into your Raspberry Pi</li> <li>Follow this guide to flash Klipper firmware onto your Arduino</li> <li>Follow this guide to configure it as a Klipper MCU     Make sure the MCU is called <code>arduino</code>. To do this, replace <code>[mcu]</code> with <code>[mcu arduino]</code></li> </ol>"},{"location":"other/auto3dklippy/#configuration","title":"Configuration","text":"<p>The configuration for the Auto3DKlippy is available in the <code>dev</code> branch. The relevant sections in <code>3dchameleon.cfg</code> are:</p> <pre><code>[mcu arduino]\nserial: /dev/serial/your-arduino-id\n\n[servo clippy]\npin: arduino: PD5\n</code></pre> <p>and</p> <pre><code># Macros for Auto3DClippy:\n[gcode_macro Clippy_Cut]\ngcode:\n  SET_SERVO SERVO=clippy ANGLE=0\n\n[gcode_macro Clippy_Release]\ngcode:\n  SET_SERVO SERVO=clippy ANGLE=90\n\n[gcode_macro Clippy_Run]\ngcode:\n  Clippy_Cut\n  G4 P250\n  Clippy_Release\n</code></pre> <p>Implementation in the <code>Toolchange</code> macro is still in development. To run the Auto3DKlippy, <code>Clippy_Run</code> will cut, wait 250ms, then release.</p>"},{"location":"other/klipperscreen/","title":"KlipperScreen","text":"<p>Follow this guide to setup 3DChameleon-klipper with KlipperScreen.</p> <p>This feature is still experimental and UNTESTED</p>"},{"location":"other/klipperscreen/#screenshots","title":"Screenshots","text":""},{"location":"other/klipperscreen/#images","title":"Images","text":"<p>First, the 3DChameleon's image needs to be added to KlipperScreen. Run the following command to download it:</p> <pre><code>cd ~\nwget https://3dcoded.github.io/3dchameleon-klipper/assets/images/3dchameleon.png\nmv 3dchameleon.png ~/KlipperScreen/styles/YOUR-KLIPPERSCREEN-STYLE/images/\n</code></pre>"},{"location":"other/klipperscreen/#configuration","title":"Configuration","text":"<p>In <code>KlipperScreen.conf</code>, in the same folder as your <code>printer.cfg</code>, add the following before the commented section at the bottom, but after the printer section:</p> <pre><code>[menu __main chameleon]\nname: 3DChameleon\nicon: 3dchameleon\n\n[menu __main chameleon seton]\nname: Set On\nicon: increase\nmethod: printer.gcode.script\nparams: {\"script\": \"SET_CHAMELEON VALUE=1\"}\n\n[menu __main chameleon setoff]\nname: Set Off\nicon: decrease\nmethod: printer.gcode.script\nparams: {\"script\": \"SET_CHAMELEON VALUE=0\"}\n\n[menu __main chameleon reset]\nname: Reset\nicon: ccw\nmethod: printer.gcode.script\nparams: {\"script\": \"RESET_CHAMELEON\"}\n\n[menu __main chameleon load]\nname: Load\nicon: extrude\nmethod: printer.gcode.script\nparams: {\"script\": \"LOAD_CHAMELEON\"}\n\n[menu __main chameleon unload]\nname: Unload\nicon: retract\n\n[menu __main chameleon unload unloadt0]\nname: Unload T0\nicon: extruder-0\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=0\"}\n\n[menu __main chameleon unload unloadt1]\nname: Unload T1\nicon: extruder-1\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=1\"}\n\n[menu __main chameleon unload unloadt2]\nname: Unload T2\nicon: extruder-2\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=2\"}\n\n[menu __main chameleon unload unloadt3]\nname: Unload T3\nicon: extruder-3\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=3\"}\n\n[menu __main chameleon pulse]\nname: Pulse\nicon: clock\n\n[menu __main chameleon pulse p0]\nname: Pulse 0\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=0\"}\n\n[menu __main chameleon pulse p1]\nname: Pulse 1\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=1\"}\n\n[menu __main chameleon pulse p2]\nname: Pulse 2\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=2\"}\n\n[menu __main chameleon pulse p3]\nname: Pulse 3\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=3\"}\n\n[menu __main chameleon pulse p4]\nname: Pulse 4\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=4\"}\n\n[menu __main chameleon pulse p5]\nname: Pulse 5\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=5\"}\n\n[menu __main chameleon pulse p6]\nname: Pulse 6\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=6\"}\n\n[menu __main chameleon pulse p7]\nname: Pulse 7\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=7\"}\n\n[menu __main chameleon pulse p8]\nname: Pulse 8\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=8\"}\n\n[menu __main chameleon pulse p9]\nname: Pulse 9\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=9\"}\n\n[menu __print chameleon]\nname: 3DChameleon\nicon: 3dchameleon\n\n[menu __print chameleon seton]\nname: Set On\nicon: increase\nmethod: printer.gcode.script\nparams: {\"script\": \"SET_CHAMELEON VALUE=1\"}\n\n[menu __print chameleon setoff]\nname: Set Off\nicon: decrease\nmethod: printer.gcode.script\nparams: {\"script\": \"SET_CHAMELEON VALUE=0\"}\n\n[menu __print chameleon reset]\nname: Reset\nicon: ccw\nmethod: printer.gcode.script\nparams: {\"script\": \"RESET_CHAMELEON\"}\n\n[menu __print chameleon load]\nname: Load\nicon: extrude\nmethod: printer.gcode.script\nparams: {\"script\": \"LOAD_CHAMELEON\"}\n\n[menu __print chameleon unload]\nname: Unload\nicon: retract\n\n[menu __print chameleon unload unloadt0]\nname: Unload T0\nicon: extruder-0\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=0\"}\n\n[menu __print chameleon unload unloadt1]\nname: Unload T1\nicon: extruder-1\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=1\"}\n\n[menu __print chameleon unload unloadt2]\nname: Unload T2\nicon: extruder-2\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=2\"}\n\n[menu __print chameleon unload unloadt3]\nname: Unload T3\nicon: extruder-3\nmethod: printer.gcode.script\nparams: {\"script\": \"UNLOAD_CHAMELEON TOOL=3\"}\n\n[menu __print chameleon pulse]\nname: Pulse\nicon: clock\n\n[menu __print chameleon pulse p0]\nname: Pulse 0\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=0\"}\n\n[menu __print chameleon pulse p1]\nname: Pulse 1\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=1\"}\n\n[menu __print chameleon pulse p2]\nname: Pulse 2\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=2\"}\n\n[menu __print chameleon pulse p3]\nname: Pulse 3\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=3\"}\n\n[menu __print chameleon pulse p4]\nname: Pulse 4\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=4\"}\n\n[menu __print chameleon pulse p5]\nname: Pulse 5\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=5\"}\n\n[menu __print chameleon pulse p6]\nname: Pulse 6\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=6\"}\n\n[menu __print chameleon pulse p7]\nname: Pulse 7\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=7\"}\n\n[menu __print chameleon pulse p8]\nname: Pulse 8\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=8\"}\n\n[menu __print chameleon pulse p9]\nname: Pulse 9\nicon: clock\nmethod: printer.gcode.script\nparams: {\"script\": \"PULSE_CHAMELEON PULSES=9\"}\n</code></pre>"},{"location":"other/klipperscreen/#restart-klipperscreen","title":"Restart KlipperScreen","text":"<p>After following the above steps, restart KlipperScreen:</p> <pre><code>sudo service KlipperScreen restart\n</code></pre>"},{"location":"other/updating/","title":"Updating","text":""},{"location":"other/updating/#how-to-update","title":"How to update","text":"<p>Updating 3dchameleon-klipper can be done with a few simple commands:</p> <pre><code>cd ~/3dchameleon-klipper\n./update.sh\n</code></pre>"},{"location":"other/utilitygcodes/","title":"Utility G-Codes","text":"<p>3dchameleon-klipper provides several utility G-Codes to assist in controlling your Chameleon.</p>"},{"location":"other/utilitygcodes/#utility-g-codes_1","title":"Utility G-Codes","text":"<ul> <li><code>SET_CHAMELEON VALUE=</code> Sets the relay pin to <code>VALUE</code>, where <code>1</code> is on, and <code>0</code> is off</li> <li><code>UNLOAD_CHAMELEON TOOL=</code> Unloads the Chameleon at the provided <code>TOOL</code>, described more below, This is usually only used in the <code>TOOLCHANGE</code> macro</li> <li><code>LOAD_CHAMELEON</code> Loads the Chameleon, described more below</li> <li><code>PRESS_CHAMELEON DURATION=</code> Presses the chameleon pin for the provided <code>DURATION</code></li> <li><code>PULSE_CHAMELEON PULSES=</code> Pulses the chameleon pin for the duration <code>PULSES * pulse_time</code> (<code>pulse_time</code> was set in Configuration)</li> <li><code>RESET_CHAMELEON</code> Rapidly pulses the chameleon pin twice to reset the state to be ready for a toolchange (exits the load/unload filament stage of the Chameleon)</li> <li><code>TIP_SHAPING TEMP= STAGES=</code> Runs tip shaping using the default 3DChameleon method, then heats to <code>TEMP</code>. See below for information on <code>STAGES</code></li> <li><code>MOVE_CHAMELEON_FILAMENT TOOL= IN=</code> Moves the filament <code>TOOL</code> <code>IN</code> inches. Alternatively, <code>MM=</code> can be passed to move the filament <code>TOOL</code> <code>MM</code> millimeters</li> </ul>"},{"location":"other/utilitygcodes/#debugginginternal-use-g-codes","title":"Debugging/Internal Use G-Codes","text":"<ul> <li><code>UPDATE_CHAMELEON_SENSOR</code> Updates the Chameleon's filament sensors and saves the value internally</li> <li><code>QUERY_CHAMELEON_SENSOR</code> Queries the Chameleon's filament sensors, output in the form of <code>[x,x,x,x,x]</code>, where <code>x=1</code> means filament present, and <code>x=0</code> means filament not present. This returns a list in preparation for multiple filament sensor support.</li> </ul>"},{"location":"other/utilitygcodes/#tip_shaping-stages","title":"TIP_SHAPING STAGES=","text":"<ul> <li><code>STAGES=1</code> Cool to 180, do full tip shaping, then heat to <code>TEMP</code></li> <li><code>STAGES=2</code> Cool to 180, then 165, do tip shaping, then heat to <code>TEMP</code></li> <li><code>STAGES=3</code> Cool to 180, then 165, then 155, do tip shaping, then heat to <code>TEMP</code></li> <li><code>STAGES=4</code> Default behavior. Cool to 180, then 165, then 155, then 150, do tip shaping, then heat to <code>TEMP</code></li> </ul> <p>NOTE that smaller tip shaping moves may be executed between temperature increments.</p>"},{"location":"other/utilitygcodes/#how-unload_chameleon-works","title":"How UNLOAD_CHAMELEON works","text":""},{"location":"other/utilitygcodes/#without-auto3dclippy","title":"WITHOUT Auto3DClippy","text":"<ol> <li>\"Press\" the Chameleon pin</li> <li>Check if filament detected for <code>TOOL</code></li> <li>Run <code>UPDATE_CHAMELEON_SENSOR</code></li> <li>Check if more than <code>max_unload_time</code> has elapsed. If so, skip remaining steps and unload failed</li> <li>Wait 0.25s with <code>G4 P250</code></li> </ol> <p>EXPERIMENTAL: Step 5 will use <code>G1 E-10 F2400</code> instead of <code>G4 P250</code> to wait 0.25s</p> <ol> <li>Repeat steps 2-5 until filament is not detected for <code>TOOL</code></li> <li>Wait another <code>unload_time</code> with <code>G4 P</code> with <code>unload_time * 1000</code></li> <li>\"Release\" the Chameleon pin</li> </ol>"},{"location":"other/utilitygcodes/#with-auto3dclippy-experimental-in-dev-branch","title":"WITH Auto3DClippy (Experimental in dev branch)","text":"<ol> <li>\"Press\" the Chameleon pin</li> <li>Load filament <code>clippy_distance</code> at 40mm/s</li> <li>Wait <code>unload_time</code> with <code>G4 P</code> with <code>unload_time * 1000</code></li> <li>\"Release\" the Chameleon pin</li> </ol>"},{"location":"other/utilitygcodes/#how-load_chameleon-works","title":"How LOAD_CHAMELEON works","text":"<ol> <li>\"Press\" the Chameleon pin</li> <li>Check if filament detected for <code>TOOL</code></li> <li>Run <code>UPDATE_CHAMELEON_SENSOR</code></li> <li>Check if more than <code>max_load_time</code> has elapsed. If so, skip remaining steps and load failed</li> <li>Wait 0.25s with <code>G4 P250</code></li> <li>Repeat steps 2-5 until filament is detected</li> <li>Wait another <code>load_time</code> with <code>G4 P</code> with <code>load_time * 1000</code></li> <li>\"Release\" the Chameleon pin</li> </ol>"},{"location":"other/utilitygcodes/#on-unloadload-failed","title":"On Unload/Load Failed","text":"<ol> <li>\"Release\" the Chameleon relay pin</li> <li>Display Unload/Load Failed with <code>M117</code></li> <li>Pause with <code>PAUSE</code></li> </ol>"},{"location":"troubleshooting/loadfailed/","title":"Load Failed","text":"<p>If your printer pauses during a toolchange and displays a <code>Load Failed</code> message on your printer's display, follow this guide to recover the toolchange and to diagnose the cause of the failure.</p>"},{"location":"troubleshooting/loadfailed/#what-the-error-means","title":"What the error means","text":"<p>A <code>Load Failed</code> message means that while the Chameleon was trying to load the filament, the printer's filament sensor didn't detect filament.</p>"},{"location":"troubleshooting/loadfailed/#how-to-recover-it","title":"How to recover it","text":"<ol> <li>Detach the Chameleon's PTFE tube from your printer's extruder</li> <li>Check the Klipper console to see what the next tool is. For example, if <code>T0 -&gt; T1</code> was the most recent toolchange message in the Klipper console, your printer was trying to unload <code>T0</code> and load <code>T1</code></li> <li>If necessary, unload the previous filament if it is still in the way of the new filament.</li> <li>Load in the corresponding filament manually into your printer's extruer</li> <li>Load the filament to your hotend using your printer controls</li> <li>Reconnect the Chameleon's PTFE tube to your printer's extruder</li> <li>Resume your print</li> </ol> <p>Congratulations! You just recovered a failed toolchange.</p>"},{"location":"troubleshooting/loadfailed/#why-it-failed","title":"Why it failed","text":"<p>To prevent future load failures, here are some common causes and fixes for failed loads:</p>"},{"location":"troubleshooting/loadfailed/#faulty-filament-sensor","title":"Faulty filament sensor","text":"<p>This section applies only to setups using 3dchameleon-klipper with a filament sensor</p> <p>If your printer's filament sensor is giving faulty readings, it can cause false alarms of failed loads and unloads. There are too many types and variations of filament sensors to cover them all, but here are some tips to diagnose the failure:</p> <ul> <li>Check filament sensor wiring</li> <li>If mechanical sensor, check the filament sensor for filament debris</li> <li>If optical sensor, the color of the filament may not work well with the sensor</li> <li>If optical sensor, lighting may also mess with detection reliability</li> </ul>"},{"location":"troubleshooting/loadfailed/#previous-filament-failed-to-unload-fully","title":"Previous filament failed to unload fully","text":"<p>This section applies to all setups</p> <p>If the previous filament failed to fully unload, it will be in the way of the next filament when trying to load. See Unload Failed Troubleshooting for common causes and fixes.</p>"},{"location":"troubleshooting/loadfailed/#3dchameleon-filament-grip","title":"3DChameleon filament grip","text":"<p>This section applies to all setups</p> <p>If the 3DChameleon can't grip the filament properly, it won't be able to push it through the Y splitter into your printer's extruder. To fix this, print out and install Tension Tuning Sliders for the problematic filament paths. Under <code>Files</code> -&gt; <code>Tension Sliders</code>, pick the appropriate slider:</p> <ul> <li>The first value is the distance between the drive gear and the bearing. Smaller values here make them closer together.</li> <li>The second value is the tension of the springs pushing the bearing and the drive gear together. Larger values here make them pushed closer together with greater force.</li> </ul>"},{"location":"troubleshooting/loadfailed/#tip-shaping","title":"Tip Shaping","text":"<p>This section applies to all setups. However, the solution described here may be slightly different if not using 3dchameleon-klipper</p> <p>If your filament tip is improperly shaped, with a blob or string at the tip, it will require excessive force to load it through the tube. In extreme cases, you can get the dreaded hook of death. </p> <p>As a general rule of thumb, for <code>QUICK_TIP_SHAPING</code>, a larger <code>MOVES</code> value will result in cleaner tips. However, the most reliable method is to install an Auto3DClippy. See Configuration for config changes. Note that you will need to switch to the <code>dev</code> branch for Auto3DClippy support as of time of writing.</p>"},{"location":"troubleshooting/unloadfailed/","title":"Unload Failed","text":"<p>If your printer pauses during a toolchange and displays an <code>Unload Failed</code> message on your printer's display, follow this guide to recover the toolchange and to diagnose the cause of the failure.</p>"},{"location":"troubleshooting/unloadfailed/#what-the-error-means","title":"What the error means","text":"<p>An <code>Unload Failed</code> message means that while the Chameleon was trying to unload the filament, the printer's filament sensor still detected filament.</p>"},{"location":"troubleshooting/unloadfailed/#how-to-recover-it","title":"How to recover it","text":"<ol> <li>Unload your filament from your printer's extruder</li> <li>Detach the Chameleon's PTFE tube from your printer's extruder</li> <li>Cut off the filament tip with side cutters</li> <li>Manually pull the filament into the Y splitter and out of the way of other filaments</li> <li>Check the Klipper console to see what the next tool is. For example, if <code>T0 -&gt; T1</code> was the most recent toolchange message in the Klipper console, your printer was trying to unload <code>T0</code> and load <code>T1</code></li> <li>Load in the corresponding filament manually into your printer's extruer</li> <li>Load the filament to your hotend using your printer controls</li> <li>Reconnect the Chameleon's PTFE tube to your printer's extruder</li> <li>Resume your print</li> </ol> <p>Congratulations! You just recovered a failed toolchange.</p>"},{"location":"troubleshooting/unloadfailed/#why-it-failed","title":"Why it failed","text":"<p>To prevent future unload failures, here are some common causes and fixes for failed unloads:</p>"},{"location":"troubleshooting/unloadfailed/#faulty-filament-sensor","title":"Faulty filament sensor","text":"<p>This section applies only to setups using 3dchameleon-klipper with a filament sensor</p> <p>If your printer's filament sensor is giving faulty readings, it can cause false alarms of failed loads and unloads. There are too many types and variations of filament sensors to cover them all, but here are some tips to diagnose the failure:</p> <ul> <li>Check filament sensor wiring</li> <li>If mechanical sensor, check the filament sensor for filament debris</li> <li>If optical sensor, the color of the filament may not work well with the sensor</li> <li>If optical sensor, lighting may also mess with detection reliability</li> </ul>"},{"location":"troubleshooting/unloadfailed/#printers-extruder-didnt-unload","title":"Printer's extruder didn't unload","text":"<p>This section applies to all setups. However, the solution described here may be slightly different if not using 3dchameleon-klipper</p> <p>If your printer's extruder doesn't unload far enough before doing the toolchange, it might still be gripping the filament while the Chameleon is trying to pull it out. To fix it, change the <code>G1 E</code> value to something higher at the end of <code>QUICK_TIP_SHAPING</code> in <code>3dchameleon.cfg</code>. </p> <p>Example before:</p> <pre><code>G1 E-60 F2000\n</code></pre> <p>Example after:</p> <pre><code>G1 E-100 F2000\n</code></pre>"},{"location":"troubleshooting/unloadfailed/#3dchameleon-filament-grip","title":"3DChameleon filament grip","text":"<p>This section applies to all setups</p> <p>If the 3DChameleon can't grip the filament properly, it won't be able to pull it out through the Y splitter. To fix this, print out and install Tension Tuning Sliders for the problematic filament paths. Under <code>Files</code> -&gt; <code>Tension Sliders</code>, pick the appropriate slider:</p> <ul> <li>The first value is the distance between the drive gear and the bearing. Smaller values here make them closer together.</li> <li>The second value is the tension of the springs pushing the bearing and the drive gear together. Larger values here make them pushed closer together with greater force.</li> </ul>"},{"location":"troubleshooting/unloadfailed/#tip-shaping","title":"Tip Shaping","text":"<p>This section applies to all setups. However, the solution described here may be slightly different if not using 3dchameleon-klipper</p> <p>**This section applies to all setups. However, the solution</p> <p>If your filament tip is improperly shaped, with a blob or string at the tip, it will require excessive force to unload it through the tube. In extreme cases, you can get the dreaded hook of death. </p> <p>As a general rule of thumb, for <code>QUICK_TIP_SHAPING</code>, a larger <code>MOVES</code> value will result in cleaner tips. However, the most reliable method is to install an Auto3DClippy. See Configuration for config changes. Note that you will need to switch to the <code>dev</code> branch for Auto3DClippy support as of time of writing.</p>"},{"location":"troubleshooting/wiringtroubleshooting/","title":"Wiring Troubleshooting","text":"<p>If your Chameleon is behaving strangely after connecting it to your Raspberry Pi, follow this guide for some common problems and solutions.</p>"},{"location":"troubleshooting/wiringtroubleshooting/#for-2-wire-method","title":"For 2-wire method","text":"<p>If you used the 2-wire method of wiring your Chameleon to your Raspberry Pi, the following are a few common wiring problems, and some solutions.</p>"},{"location":"troubleshooting/wiringtroubleshooting/#gnd-and-data-switched-chameleon-always-pulsing","title":"GND and Data switched: Chameleon always pulsing","text":"<p>If your Ground and Data wires are swapped, the Chameleon pin will be inverted. To test for this, use:</p> <pre><code>SET_CHAMELEON VALUE=1\n</code></pre> <p>If the Chameleon stops pulsing after this, then your Ground and Data wires are swapped. To fix it, just switch them. After you do this, the pulsing should start again. Run:</p> <pre><code>SET_CHAMELEON VALUE=0\n</code></pre> <p>and verify that pulsing stops now. If so, your Chameleon is now working properly with your Raspberry Pi.</p>"},{"location":"troubleshooting/wiringtroubleshooting/#wrong-pins-plugged-into-chameleon-no-pulsing","title":"Wrong pins plugged into Chameleon: No pulsing","text":"<p>There are three pins for the limit switch: V+, GND, and Data. The two wires should go into the GND and Data pins. Make sure to follow Wiring carefully to plug the wires into the correct pins.</p>"},{"location":"troubleshooting/wiringtroubleshooting/#for-relay-method","title":"For Relay method","text":""},{"location":"troubleshooting/wiringtroubleshooting/#nc-and-no-swapped-on-the-relay-shield-no-pulsing-or-always-pulsing","title":"NC and NO swapped on the Relay Shield: No pulsing or Always pulsing","text":"<p>Make sure that you followed Wiring correctly to ensure that you are using the COM and NO pins, not COM and NC pins on the relay shield.</p>"},{"location":"troubleshooting/wiringtroubleshooting/#limit-switch-not-pressed","title":"Limit Switch not pressed","text":"<p>Make sure that your limit switch is securely closed (mechanically) using a zip tie.</p>"}]}